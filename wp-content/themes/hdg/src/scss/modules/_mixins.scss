// Fluid Responsive Typography
// For when you need to set a font size at a specific breakpoint or between specific breakpoints and then scale it up or down from there
// Usage
// .oneorg-heading-massive {
//   @include clamp-calc-step('font-size', (sm: $type-6, lg: $type-8, xl: $type-9));
// }
// .pad {
//   @include clamp-calc-step('padding-left', (sm: $space-1, lg: $space-4, xl: $space-6));
// }
//Loosely based around https://www.smashingmagazine.com/2017/05/fluid-responsive-typography-css-poly-fluid-sizing/
@mixin clamp-calc-step($property, $map) {

    // Get the number of provided breakpoints
    $length: length(map-keys($map));
  
    // Error if the number of breakpoints is < 2
    @if ($length < 2) {
      @error "clamp-calc-step() $map requires at least values";
    }
  
    // Get the keys of the map
    $keys: map-keys($map);
  
    //If there are only two values, where we're going we don't need breakpoints...
    @if ($length == 2) {
  
      //Get the first and last values
      $value-min: map-get($map, nth($keys,1));
      $value-max: map-get($map, nth($keys,2));
      //Get the first and last breakpoints
      $breakpoint-min: nth($keys,1);
      $breakpoint-max: nth($keys,2);
  
      @if ($value-min != $value-max) {
        #{$property}: clamp-calc(math.div(strip-unit($value-min), 16), math.div(strip-unit($value-max), 16), $breakpoint-min, $breakpoint-max);  
      } @else {
        #{$property}: toRem(strip-unit($value-min));
      }
  
    } @else {
  
       // Minimum size in Rems
       #{$property}: toRem(strip-unit(map-get($map, nth($keys,1))));
      
       // Interpolated size through breakpoints
       @for $i from 1 through ($length - 1) {
         @include mq($from: strip-unit(nth($keys,$i))) {
           $value-min: map-get($map, nth($keys,$i));
           $value-max: map-get($map, nth($keys,($i + 1)));
           $breakpoint-min: nth($keys,$i);
           $breakpoint-max: nth($keys,$i + 1);
           // If values are not equal, perform clamp calc function
           @if ($value-min != $value-max) {
             #{$property}: clamp-calc(math.div(strip-unit($value-min), 16), math.div(strip-unit($value-max), 16), $breakpoint-min, $breakpoint-max);  
           } @else {
             #{$property}: toRem(strip-unit($value-min));
           }
         }
       }
       // Maxmimum size in rems
       @include mq($from: strip-unit(nth($keys,$length))) {
         #{$property}: toRem(strip-unit(map-get($map, nth($keys,$length))));
       }
      
    }
    
}
  
// SVG icon mixin
@mixin error-icon($color, $opacity: 0.6) {
  background-image: url('data:image/svg+xml;utf8,<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m10 0c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm1 15h-2v-2h2zm0-4h-2v-6h2z" fill="#{$color}" opacity="#{$opacity}"/></svg>');
}

@mixin warning-icon($color, $opacity: 0.6) {
  background-image: url('data:image/svg+xml;utf8,<svg viewBox="0 0 16 13" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.666687 13H15.3334L8.00002 0.333334L0.666687 13ZM8.66669 11H7.33335V9.66667H8.66669V11ZM8.66669 8.33333H7.33335V5.66667H8.66669V8.33333Z" fill="#{$color}" opacity="#{$opacity}"/></svg>');
}

//External icon mixin
@mixin button-icon($color) {
  background-image: url('data:image/svg+xml;utf8,<svg viewBox="0 0 15 15" xmlns="http://www.w3.org/2000/svg"><path d="M8 11L13 6M13 6L8 1M13 6L1 6" fill="none" stroke="#{$color}" stroke-width="2" stroke-linecap="round"/></svg>');
}


// The stack
// Usage <div class="stack"><div><!-- child --></div><div><!-- child --></div></div>
// The mixin @include stack(1rem);
@mixin stack($measure: 1.5rem) {

	display: flex;
	flex-direction: column;
	justify-content: flex-start;

  > * {
    /* â†“ Any extant vertical margins are removed */
    margin-block-start: 0 !important;
    margin-block-end: 0 !important;
  }

	& > * + * {
		margin-block-start: var(--buffer, $measure) !important;
	}

}

//Container content
@mixin container-content($breakpoint: 'xl', $start: 3, $span: 8) {

  @include mq($from: $breakpoint) {
    
    display: grid;
    //12 col grid;
    grid-template-columns: repeat(12, 1fr);
    //16-96px padding;
    padding: 0 var(--wp--custom--spacing--s-xxl);
    width: 100%;
    max-width: clamp(16rem, var(--wp--custom--width--container, 120rem), 100vw);
    margin-inline: auto;
    gap: var(--wp--custom--spacing--gap);
    
    > * {
      grid-column: $start / span $span;
    }

  }
}
